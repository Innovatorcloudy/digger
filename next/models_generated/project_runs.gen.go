// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newProjectRun(db *gorm.DB, opts ...gen.DOOption) projectRun {
	_projectRun := projectRun{}

	_projectRun.projectRunDo.UseDB(db, opts...)
	_projectRun.projectRunDo.UseModel(&model.ProjectRun{})

	tableName := _projectRun.projectRunDo.TableName()
	_projectRun.ALL = field.NewAsterisk(tableName)
	_projectRun.ID = field.NewString(tableName, "id")
	_projectRun.CreatedAt = field.NewTime(tableName, "created_at")
	_projectRun.UpdatedAt = field.NewTime(tableName, "updated_at")
	_projectRun.DeletedAt = field.NewField(tableName, "deleted_at")
	_projectRun.ProjectID = field.NewString(tableName, "project_id")
	_projectRun.StartedAt = field.NewInt64(tableName, "started_at")
	_projectRun.EndedAt = field.NewInt64(tableName, "ended_at")
	_projectRun.Status = field.NewString(tableName, "status")
	_projectRun.Command = field.NewString(tableName, "command")
	_projectRun.Output = field.NewString(tableName, "output")
	_projectRun.ActorUsername = field.NewString(tableName, "actor_username")
	_projectRun.OrgID = field.NewString(tableName, "org_id")

	_projectRun.fillFieldMap()

	return _projectRun
}

type projectRun struct {
	projectRunDo

	ALL           field.Asterisk
	ID            field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	ProjectID     field.String
	StartedAt     field.Int64
	EndedAt       field.Int64
	Status        field.String
	Command       field.String
	Output        field.String
	ActorUsername field.String
	OrgID         field.String

	fieldMap map[string]field.Expr
}

func (p projectRun) Table(newTableName string) *projectRun {
	p.projectRunDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectRun) As(alias string) *projectRun {
	p.projectRunDo.DO = *(p.projectRunDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectRun) updateTableName(table string) *projectRun {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.ProjectID = field.NewString(table, "project_id")
	p.StartedAt = field.NewInt64(table, "started_at")
	p.EndedAt = field.NewInt64(table, "ended_at")
	p.Status = field.NewString(table, "status")
	p.Command = field.NewString(table, "command")
	p.Output = field.NewString(table, "output")
	p.ActorUsername = field.NewString(table, "actor_username")
	p.OrgID = field.NewString(table, "org_id")

	p.fillFieldMap()

	return p
}

func (p *projectRun) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectRun) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["started_at"] = p.StartedAt
	p.fieldMap["ended_at"] = p.EndedAt
	p.fieldMap["status"] = p.Status
	p.fieldMap["command"] = p.Command
	p.fieldMap["output"] = p.Output
	p.fieldMap["actor_username"] = p.ActorUsername
	p.fieldMap["org_id"] = p.OrgID
}

func (p projectRun) clone(db *gorm.DB) projectRun {
	p.projectRunDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectRun) replaceDB(db *gorm.DB) projectRun {
	p.projectRunDo.ReplaceDB(db)
	return p
}

type projectRunDo struct{ gen.DO }

type IProjectRunDo interface {
	gen.SubQuery
	Debug() IProjectRunDo
	WithContext(ctx context.Context) IProjectRunDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectRunDo
	WriteDB() IProjectRunDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectRunDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectRunDo
	Not(conds ...gen.Condition) IProjectRunDo
	Or(conds ...gen.Condition) IProjectRunDo
	Select(conds ...field.Expr) IProjectRunDo
	Where(conds ...gen.Condition) IProjectRunDo
	Order(conds ...field.Expr) IProjectRunDo
	Distinct(cols ...field.Expr) IProjectRunDo
	Omit(cols ...field.Expr) IProjectRunDo
	Join(table schema.Tabler, on ...field.Expr) IProjectRunDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectRunDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectRunDo
	Group(cols ...field.Expr) IProjectRunDo
	Having(conds ...gen.Condition) IProjectRunDo
	Limit(limit int) IProjectRunDo
	Offset(offset int) IProjectRunDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectRunDo
	Unscoped() IProjectRunDo
	Create(values ...*model.ProjectRun) error
	CreateInBatches(values []*model.ProjectRun, batchSize int) error
	Save(values ...*model.ProjectRun) error
	First() (*model.ProjectRun, error)
	Take() (*model.ProjectRun, error)
	Last() (*model.ProjectRun, error)
	Find() ([]*model.ProjectRun, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectRun, err error)
	FindInBatches(result *[]*model.ProjectRun, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectRun) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectRunDo
	Assign(attrs ...field.AssignExpr) IProjectRunDo
	Joins(fields ...field.RelationField) IProjectRunDo
	Preload(fields ...field.RelationField) IProjectRunDo
	FirstOrInit() (*model.ProjectRun, error)
	FirstOrCreate() (*model.ProjectRun, error)
	FindByPage(offset int, limit int) (result []*model.ProjectRun, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectRunDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectRunDo) Debug() IProjectRunDo {
	return p.withDO(p.DO.Debug())
}

func (p projectRunDo) WithContext(ctx context.Context) IProjectRunDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectRunDo) ReadDB() IProjectRunDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectRunDo) WriteDB() IProjectRunDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectRunDo) Session(config *gorm.Session) IProjectRunDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectRunDo) Clauses(conds ...clause.Expression) IProjectRunDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectRunDo) Returning(value interface{}, columns ...string) IProjectRunDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectRunDo) Not(conds ...gen.Condition) IProjectRunDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectRunDo) Or(conds ...gen.Condition) IProjectRunDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectRunDo) Select(conds ...field.Expr) IProjectRunDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectRunDo) Where(conds ...gen.Condition) IProjectRunDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectRunDo) Order(conds ...field.Expr) IProjectRunDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectRunDo) Distinct(cols ...field.Expr) IProjectRunDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectRunDo) Omit(cols ...field.Expr) IProjectRunDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectRunDo) Join(table schema.Tabler, on ...field.Expr) IProjectRunDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectRunDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectRunDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectRunDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectRunDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectRunDo) Group(cols ...field.Expr) IProjectRunDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectRunDo) Having(conds ...gen.Condition) IProjectRunDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectRunDo) Limit(limit int) IProjectRunDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectRunDo) Offset(offset int) IProjectRunDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectRunDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectRunDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectRunDo) Unscoped() IProjectRunDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectRunDo) Create(values ...*model.ProjectRun) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectRunDo) CreateInBatches(values []*model.ProjectRun, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectRunDo) Save(values ...*model.ProjectRun) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectRunDo) First() (*model.ProjectRun, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectRun), nil
	}
}

func (p projectRunDo) Take() (*model.ProjectRun, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectRun), nil
	}
}

func (p projectRunDo) Last() (*model.ProjectRun, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectRun), nil
	}
}

func (p projectRunDo) Find() ([]*model.ProjectRun, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectRun), err
}

func (p projectRunDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectRun, err error) {
	buf := make([]*model.ProjectRun, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectRunDo) FindInBatches(result *[]*model.ProjectRun, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectRunDo) Attrs(attrs ...field.AssignExpr) IProjectRunDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectRunDo) Assign(attrs ...field.AssignExpr) IProjectRunDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectRunDo) Joins(fields ...field.RelationField) IProjectRunDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectRunDo) Preload(fields ...field.RelationField) IProjectRunDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectRunDo) FirstOrInit() (*model.ProjectRun, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectRun), nil
	}
}

func (p projectRunDo) FirstOrCreate() (*model.ProjectRun, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectRun), nil
	}
}

func (p projectRunDo) FindByPage(offset int, limit int) (result []*model.ProjectRun, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectRunDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectRunDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectRunDo) Delete(models ...*model.ProjectRun) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectRunDo) withDO(do gen.Dao) *projectRunDo {
	p.DO = *do.(*gen.DO)
	return p
}
